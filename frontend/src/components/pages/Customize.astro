---
import { ImgContainer } from '@/components/common/ImgContainer'
import { PizzaData, type PizzaDataTranslation } from '@/components/customize/PizzaData'
import { PizzaIngredients, type IngredientTypeTranslation } from '@/components/customize/PizzaIngredients'
import { IMAGE_CDN } from '@/constants/imageCDN'
import { MAIN__TAG__ANIMATION__NAME } from '@/constants/viewTransitions'
import pizzaList from '@/assets/data/pizza.json'
import Layout from '@/layouts/Layout.astro'
import { getAllIngredients } from '@/services/ingredientsService'
import type { LocalesObject, LocalesString, QuantityTranslation, SeoTranslation } from '@/types'
import { compareStringsOfNames } from '@/utils/compareStringsOfNames'
import { Image } from 'astro:assets'

interface Props {
   pizza: string
   t: {
		seo: SeoTranslation
		quantity: QuantityTranslation
      pizzaData: PizzaDataTranslation
		ingredientTypeList: IngredientTypeTranslation
   }
}

const { pizza, t } = Astro.props

const currentLocale = Astro.currentLocale as LocalesString

type CustomizePizza = {
	name: LocalesObject
   image: {
		name: string,
		author: LocalesObject
	},
	ingredients: number[]
}

const getCurrentPizza = ()  => {
	const emptyPizza: CustomizePizza = { 
		name: {
			en: 'Empty pizza',
			es: 'Pizza vacía'
		}, 
		image: { 
			name: 'empty', 
			author: {
				en: "Mariusz Słoński's photo on Unsplash",
				es: 'Foto de Mariusz Słoński en Unsplash'
			}
		}, 
		ingredients: []  
	}
	return pizza !== 'empty' 
		? pizzaList.filter(({ name }) => compareStringsOfNames(name.en, pizza))[0]
		: emptyPizza
}

const ingredients = await getAllIngredients()

const getIngredients = () => {
	return pizzaList
		.filter(({ name }) => compareStringsOfNames(name.en, pizza))
		.flatMap(({ ingredients }) => ingredients)
}
---

<Layout 
	title={t.seo.title}
	description={t.seo.description}
	activeLink='Customize'
>
	<main transition:name={MAIN__TAG__ANIMATION__NAME}>
		<div>
			<ImgContainer
				client:load
				locale={currentLocale}
				styleClass='pizza-image' 
				authorName={getCurrentPizza().image.author[currentLocale]}
			>
				<Image 
					class='pizza-custom' 
					src={`${IMAGE_CDN}/pizza/${getCurrentPizza().image.name}.avif`}
					alt={getCurrentPizza().name[currentLocale]}
					width='320'
					height='260'
					decoding='sync'
					loading='eager'
					transition:name={getCurrentPizza().image.name}
				/>
			</ImgContainer>
			<PizzaData 
				client:load
				pizza={{
               pizzaName: getCurrentPizza().name,
					pizzaImageName: getCurrentPizza().image.name + '--small',
					pizzaImageAuthor: getCurrentPizza().image.author
				}}
				prebuildIngredients={
					getIngredients().map((id) => ingredients.filter(({ idIngredient }) => id === idIngredient)[0])
				}
            t={{
					quantity: t.quantity,
					pizzaDataTranslation: t.pizzaData
				}}
				localForModalLinks={Astro.currentLocale as LocalesString}
			/>
		</div>
		<div>
			<PizzaIngredients 
            client:idle 
            prebuildIngredientIDs={getIngredients()} 
            ingredientList={ingredients} 
            t={{
					quantity: t.quantity,
					ingredientTypeList: t.ingredientTypeList
				}}
				locale={currentLocale}
         />
		</div>
	</main>
</Layout>

<style is:global>
	.pizza-image {
		height: 224px;
	}
</style>

<style>
	main {
		display: flex;
		width: 100%;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		gap: 16px;
		padding: 16px;
		&> div {
			width: 100%;
			&:first-of-type {
				display: flex;
				flex-direction: column;
				width: 100%;
				max-width: 480px;
				gap: 16px;
			}
		}
		@media (width > 720px) {
			display: flex;
			flex-direction: row;
			justify-content: start;
			align-items: start;
			max-height: calc(100svh - 56px );
			overflow: hidden;
			&> div:first-of-type {
				max-width: 360px;
			}
		}
	}
</style>

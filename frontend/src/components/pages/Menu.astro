---
import { CardContainer } from '@/components/common/CardContainer'
import { ImgContainer } from '@/components/common/ImgContainer'
import { AddPizza } from '@/components/order/AddPizza'
import { IMAGE_CDN } from '@/constants/imageCDN'
import { Size } from '@/constants/size'
import { SECONDARY__BUTTON } from '@/constants/styles'
import { MAIN__TAG__ANIMATION__NAME } from '@/constants/viewTransitions'
import pizzaList from '@/data/pizza.json'
import Layout from '@/layouts/Layout.astro'
import { getAllIngredients } from '@/services/ingredientsService'
import type { LocalesString, SeoTranslation } from '@/types'
import { getPizzaPrice } from '@/utils/getPizzaPrice'
import { Image } from 'astro:assets'
import { getRelativeLocaleUrl } from 'astro:i18n'

interface Props {
   t: {
      seo: SeoTranslation
		addLabel: string
      customize: string
   }
}

function getUrlImage(specificPath: string) {
	return `${IMAGE_CDN}/pizza/${specificPath}.avif`
}

function getCustomizeUrl(pizzaName: string) {
	return getRelativeLocaleUrl(
		Astro.currentLocale ?? 'en', 
		`customize/${pizzaName.replace(' ', '-').toLowerCase()}`
	)
}

const { t } = Astro.props

const currentLocal = Astro.currentLocale as LocalesString

const ingredients = await getAllIngredients()

const getIngredients = (idsList: number[]) => {	
	return idsList.map((id) => ingredients.filter(({ idIngredient }) => id === idIngredient)[0])
}
---

<Layout
	title={t.seo.title}
	description={t.seo.description}
	activeLink='Menu'
>
	<main transition:name={MAIN__TAG__ANIMATION__NAME}>
		<h1>{t.seo.h1}</h1>
		<div>
			{pizzaList.map((pizza, index) => (
				<CardContainer styleClass='pizza-container'>
					<>
						<ImgContainer styleClass='pizza-image' figcaptionText={pizza.image.author[currentLocal]}>
							<Image 
								src={getUrlImage(pizza.image.name)}
								alt={`${pizza.name} pizza`}
								width='280'
								height='220'
								loading={index < 6 ? 'eager' : 'lazy'}
							/>
						</ImgContainer>
						<div class='pizza-information'>
							<h2>{pizza.name[currentLocal]}</h2>
							<p class='information-important'>${getPizzaPrice(pizza.ingredients.length, Size.MEDIUM, 1)}</p>
							<p>{getIngredients(pizza.ingredients)
								.map(({ ingredientName }) => ingredientName[currentLocal]).join(', ')
							}</p>
						</div>
						<div class='buttons-column'>
							<AddPizza 
								client:idle
								label={t.addLabel}
								pizza={{
									pizzaName: pizza.name,
									pizzaImageName: pizza.image.name + '--small',
									pizzaImageAuthor: pizza.image.author,
									size: Size.MEDIUM,
									quantity: 1,
									pizzaIngredients: getIngredients(pizza.ingredients).map(
										(ingredient) => ({ id: ingredient.idIngredient, name: ingredient.ingredientName, quantity: 1 }))
								}} 
							/>
							<a class={SECONDARY__BUTTON} href={getCustomizeUrl(pizzaList[index].name.en)}>
								{t.customize} {pizza.name[currentLocal].toLowerCase()}
							</a>
						</div>
					</>
				</CardContainer>
			))}
		</div>
	</main>
</Layout>

<style is:global>
	.pizza-container {
		display: flex;
		max-width: 340px;
		flex-direction: column;
		gap: 12px;
	}

	.pizza-image {
		height: 140px;
		border-radius: 16px;
		overflow: hidden;
		& img {
			position: absolute;
			height: fit-content;
			/* top: -36px; */
		}
	}
</style>

<style>	
	main {
		padding: 16px;
		& > div {
			display: grid;
			max-width: 1500px;
			column-gap: 16px;
			row-gap: 12px;
			margin-top: 12px;
			margin-inline: auto;
			place-content: center;
			grid-template-columns: repeat(auto-fill, minmax(288px, auto));
		}
	}

	.pizza-information {
		display: grid;
		grid-template-columns: auto auto;
		justify-content: space-between;
		row-gap: 4px;
		& .information-important {
			font-size: 1.25rem;
			font-weight: bold;
		}
	}

	.buttons-column {
		display: flex;
		flex-direction: column;
		margin-top: auto;
		gap: 12px;
	}
</style>
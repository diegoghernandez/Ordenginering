---
import { LargeModalContainer } from '@/components/common/LargeModalContainer'
import AccountButton from '@/components/layout/nav/AccountButton.astro'
import SelectLanguage from '@/components/layout/nav/SelectLanguage.astro'
import { ShoppingCart } from '@/components/order/ShoppingCart'
import { ShowOrder } from '@/components/order/ShowOrders'
import navbarTranslation from '@/assets/i18n/components/navbar.json'
import type { ActiveLink, LocalesString } from '@/types'
import { getRelativeLocaleUrl } from 'astro:i18n'

const currentLocale = Astro.currentLocale as LocalesString
const t = navbarTranslation[currentLocale]

const pages = [
	{ name: t.links.home, link: getRelativeLocaleUrl(currentLocale, '')},
	{ name: t.links.menu, link: getRelativeLocaleUrl(currentLocale, 'menu')},
	{ name: t.links.customize, link: getRelativeLocaleUrl(currentLocale, 'customize/empty')}
]

interface Props {
	activeLink: ActiveLink
}

const { activeLink } = Astro.props
---

<nav transition:animate="none">
   <div class='menu--movil'>
      <button id='menu-button' class='interaction--buttons' aria-label={t.menuButton}>
         <svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='currentColor' viewBox='0 0 24 24' class='humbleicons hi-view-list'>
            <path xmlns='http://www.w3.org/2000/svg' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M4 6h16M4 10h16M4 14h16M4 18h16'/>
         </svg>
      </button>
      <LargeModalContainer client:load position='left' currentLocale={currentLocale} >
         <ul>
            {pages.map((page) => (
               <li>
                  <a href={page.link} class={activeLink === page.name ? 'active' : '' } >
                     {page.name}
                  </a>
               </li>
            ))}
         </ul>
      </LargeModalContainer>
   </div>
   <div class='menu--deskstop'>
      <ul>
         {pages.map((page) => (
            <li>
               <a href={page.link} class={activeLink === page.name ? 'active' : '' } >
                  {page.name}
               </a>
            </li>
         ))}
      </ul>
   </div>
   <div class='nav--interaction--buttons'>
      <SelectLanguage />
      <AccountButton activeLink={activeLink} />
      <ShoppingCart client:load extraClass='interaction--buttons' label={t.shoppingCartButton} />
      <LargeModalContainer
         client:load
         description={t.shoppingCartModalDescription}
         position='right'
         currentLocale={currentLocale}
      >
         <ShowOrder client:idle currentLocal={currentLocale} />
      </LargeModalContainer>
   </div>
</nav>

<script>
   document.addEventListener('astro:page-load', () => {
      const openMovilMenuButton = document.querySelector('#menu-button')
      const movilMenuModal = document.querySelector('.menu--movil dialog')

      if (openMovilMenuButton instanceof HTMLButtonElement && movilMenuModal instanceof HTMLDialogElement) {
         openMovilMenuButton.addEventListener('click', () => movilMenuModal.showModal())
      }

      const openCartButton = document.querySelector('#shopping-cart')
      const cartModalList = document.querySelectorAll('.nav--interaction--buttons dialog')
      const cartModal = cartModalList[cartModalList.length - 1]

      if (openCartButton instanceof HTMLButtonElement && cartModal instanceof HTMLDialogElement) {
         openCartButton.addEventListener('click', () => cartModal.showModal())
      }
   })
</script>

<style>
   a {
      color: var(--text-color);
      &.active {
         color: var(--primary-interaction);
      }
      &:hover,
      &:focus-within {
         color: var(--primary-interaction);
      }
      &:focus-within {
         outline: 1px solid var(--outline);
      }
   }

   .menu--movil {
      & button {
         border: none;
         height: 24px;
         background-color: transparent;
      }
      & li {	
         position: relative;
         &::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            pointer-events: none;
            transition: opacity 200ms cubic-bezier(.2,0,0,1);
            background-color: var(--state-layer-color);
         }
         &:hover::before {
            opacity: .08;
         }
         &:focus-within::before {
            opacity: .12;
         }
      }
      & a {
         display: inline-flex;
         height: 64px;
         width: 100%;
         padding: 24px;
         align-items: center;
         border-bottom: 1px solid var(--divider);
         outline: none;
      }
   }

   .menu--deskstop {
      display: none;

      & ul {
         list-style: none;
         display: flex;
         flex-direction: row;
         gap: 24px;
         color: var(--text-color);
         font-size: 1rem;
		   font-weight: 500;
         & li {
            display: flex;
            justify-content: center;
            gap: 4px;            
         }
      }
   }

   @media (width > 640px) {
      .menu--movil {
         display: none;
      }
      .menu--deskstop {
         display: block;
      }
   }

   .interaction--buttons {
      height: 24px;
      color: var(--text-color);
      &:hover {
         color: var(--primary-interaction);
      }
      &:focus-within {
         color: var(--primary-interaction);
         outline: 1px solid var(--outline);
      }
   }

   .nav--interaction--buttons {
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 16px;
		font-size: 1rem;
		font-weight: 500;
		color: var(--text-color);
	}
</style>
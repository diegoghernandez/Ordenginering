---
import { CardContainer } from '@/components/common/CardContainer'
import { SmallModalContainer } from '@/components/common/SmallModalContainer'
import { PRIMARY__BUTTON, SECONDARY__BUTTON } from '@/constants/styles'
import type { ActiveLink } from '@/types'
import { getRelativeLocaleUrl } from 'astro:i18n'

interface Props {
   activeLink: ActiveLink
}

const accountLink = getRelativeLocaleUrl(Astro.currentLocale ?? 'en', 'customer')

const { activeLink } = Astro.props
---

<div class:list={['account-button', activeLink === 'Account' ? 'active' : '' ]}>
   <button>
      Account
      <svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='currentColor' viewBox='0 0 24 24' class='humbleicons hi-user'>
         <path xmlns='http://www.w3.org/2000/svg' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M18 19v-1.25c0-2.071-1.919-3.75-4.286-3.75h-3.428C7.919 14 6 15.679 6 17.75V19m9-11a3 3 0 11-6 0 3 3 0 016 0z'/>
      </svg>
   </button>
   <dialog class='account-dialog'>
      <CardContainer styleClass='account-button-card'>
         <>
            <a href={accountLink}>Customer</a>
            <button>Dark mode</button>
            <button>Logout</button>
         </>
      </CardContainer>
   </dialog>
   <SmallModalContainer>
      <>
         <h3>Do you want to close your session?</h3>
         <button class={PRIMARY__BUTTON}>Accept</button>
         <button class={SECONDARY__BUTTON}>Cancel</button>
      </>
   </SmallModalContainer>
</div>

<script>
   import { logOut } from '@/services/authService'
   import { setTheme } from '@/utils/setTheme'

   document.addEventListener('astro:page-load', () => {
      const accountButton = document.querySelector('.account-button button')
      const accountDialog = document.querySelector('.account-dialog')
   
      if (accountButton instanceof HTMLButtonElement) {
         accountButton.addEventListener('click', () => {
            if (accountDialog instanceof HTMLDialogElement) {
               if (accountDialog.checkVisibility()) accountDialog.close()
               else accountDialog.show()
            }
         })
      }
   
      const accountLink = document.querySelector('.account-dialog a')
      if (accountLink instanceof HTMLAnchorElement) accountLink.pathname += localStorage.getItem('id') ?? ''
   
      const dialogButtonList = document.querySelectorAll('.account-dialog button')
      const darkModeButton = dialogButtonList[0]
      darkModeButton.addEventListener('click', setTheme)
   
      const confirmationLogoutDialog = document.querySelectorAll('.account-button dialog')[1]
      const logoutButton = dialogButtonList[1]
      logoutButton.addEventListener('click', () => {
         if (confirmationLogoutDialog instanceof HTMLDialogElement) confirmationLogoutDialog.showModal()
      })
   
      const confirmationLogoutButtons = confirmationLogoutDialog.querySelectorAll('button')
      confirmationLogoutButtons[0].addEventListener('click', () => {
         logOut().then(() => globalThis.location.reload())
      })
      confirmationLogoutButtons[1].addEventListener('click', () => {
         if (confirmationLogoutDialog instanceof HTMLDialogElement) confirmationLogoutDialog.close()
      })
   })
</script>

<style is:global>
   .account-button-card {
      display: grid;
      place-content: start;
      gap: 16px;
      height: 100%;
      background-color: var(--background);
   }

   @media (prefers-reduced-motion: no-preference) {
      .account-dialog {
         --slide-duration: 480ms;
         animation: slide-up var(--slide-duration);
         
         & .account-button-card {
            overflow-y: hidden;
            animation: animate-padding-reverse var(--slide-duration);
         }
         
         &[open] {   
            animation: slide-down var(--slide-duration);
            
            & .account-button-card {
               animation: animate-padding var(--slide-duration);
            }
         }
      }
   }

   @keyframes animate-padding {
      from { padding-block: 0; }

      to { padding-block: 24px; }
   }

   @keyframes animate-padding-reverse {
      from { padding-block: 24px; } 

      to { padding-block: 0; }
   }

   @keyframes slide-down {
      0% { height: 0; }
      
      100% { height: 156px; }
   }

   @keyframes slide-up {
      0% {
         display: block;
         height: 156px;
      }
      
      100% {
         display: none;
         height: 0;
      }
   }
</style>

<style>
   .account-button {
      position: relative;

      & > button {
         display: flex;
         justify-content: center;
         gap: 4px;
         color: currentColor;
         &.active {
            color: var(--primary-interaction);
         }
         &:hover,
         &:focus-within {
            color: var(--primary-interaction);
         }
         &:focus-within {
            outline: 1px solid var(--outline);
         }
      }

      & .account-dialog {
         top: 32px;
         left: -102px;
         width: 240px;
         border: none;
         background-color: transparent;
         
         & button, a {
            height: auto;
            color: var(--text-color);
            font-size: 1rem;
            font-weight: 500;

            &:hover,
            &:focus-within {
               color: var(--primary-interaction);
            }
            &:focus-within {
               outline: 1px solid var(--outline);
            }
         }

         & button:last-of-type {
            width: fit-content;
            margin-top: 4px;
            color: var(--error);

            &:hover,
            &:focus-within {
               color: var(--error-dark);
            }
         }
      }
   }
</style>